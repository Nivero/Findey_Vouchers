@model CustomerVoucherViewModel

<script src="~/lib/jsQr/jsQR.js"></script>
<form asp-controller="CustomerVoucher" asp-action="Index" method="get">
    <p>
        Zoek op voucher code: <input type="text" asp-for="SearchQuery"/>
        <input type="submit" value="Filter"/>
    </p>
</form>
<div id="loadingMessage">ðŸŽ¥ Unable to access video stream (please make sure you have a webcam enabled)</div>
  <canvas id="canvas" hidden></canvas>
  <div id="output" hidden>
    <div id="outputMessage">No QR code detected.</div>
    <div hidden><b>Data:</b> <span id="outputData"></span></div>
  </div>
<table class="table">
    <thead>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.Vouchers.First().PurchasedOn)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vouchers.First().Price)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vouchers.First().Code)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vouchers.First().ValidUntil)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vouchers.First().EmailSent)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Vouchers.First().IsUsed)
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in  Model.Vouchers)
    {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.PurchasedOn)
            </td>
            <td>
                â‚¬@Html.DisplayFor(modelItem => item.Price)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Code)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ValidUntil)
            </td>
            <td>
                @if (item.EmailSent)
                {
                    <span class="voucher-status-dot-on d-flex justify-content-center"></span>
                }
                else
                {
                    <span class="voucher-status-dot-warning d-flex justify-content-center"></span>
                }
            </td>
            <td>
                @if (!item.IsUsed)
                {
                    <span class="voucher-status-dot-on d-flex justify-content-center"></span>
                }
                else
                {
                    <span class="voucher-status-dot-off d-flex justify-content-center"></span>
                }
            </td>
            <td>
                <a asp-action="Details" asp-route-id="@item.Id">Details</a>
            </td>
        </tr>
    }
    </tbody>
</table>
  <script>
    var video = document.createElement("video");
    var canvasElement = document.getElementById("canvas");
    var canvas = canvasElement.getContext("2d");
    var loadingMessage = document.getElementById("loadingMessage");
    var outputContainer = document.getElementById("output");
    var outputMessage = document.getElementById("outputMessage");
    var outputData = document.getElementById("outputData");

    function drawLine(begin, end, color) {
      canvas.beginPath();
      canvas.moveTo(begin.x, begin.y);
      canvas.lineTo(end.x, end.y);
      canvas.lineWidth = 4;
      canvas.strokeStyle = color;
      canvas.stroke();
    }

    // Use facingMode: environment to attemt to get the front camera on phones
    navigator.mediaDevices.getUserMedia({ video: { facingMode: "environment" } }).then(function(stream) {
      video.srcObject = stream;
      video.setAttribute("playsinline", true); // required to tell iOS safari we don't want fullscreen
      video.play();
      requestAnimationFrame(tick);
    });

    function tick() {
      loadingMessage.innerText = "âŒ› Loading video..."
      if (video.readyState === video.HAVE_ENOUGH_DATA) {
        loadingMessage.hidden = true;
        canvasElement.hidden = false;
        outputContainer.hidden = false;

        canvasElement.height = video.videoHeight;
        canvasElement.width = video.videoWidth;
        canvas.drawImage(video, 0, 0, canvasElement.width, canvasElement.height);
        var imageData = canvas.getImageData(0, 0, canvasElement.width, canvasElement.height);
        var code = jsQR(imageData.data, imageData.width, imageData.height, {
          inversionAttempts: "dontInvert",
        });
        if (code) {
          drawLine(code.location.topLeftCorner, code.location.topRightCorner, "#FF3B58");
          drawLine(code.location.topRightCorner, code.location.bottomRightCorner, "#FF3B58");
          drawLine(code.location.bottomRightCorner, code.location.bottomLeftCorner, "#FF3B58");
          drawLine(code.location.bottomLeftCorner, code.location.topLeftCorner, "#FF3B58");
          outputMessage.hidden = true;
          outputData.parentElement.hidden = false;
          outputData.innerText = code.data;
        } else {
          outputMessage.hidden = false;
          outputData.parentElement.hidden = true;
        }
      }
      requestAnimationFrame(tick);
    }
  </script>